// Mocks generated by Mockito 5.2.0 from annotations
// in barbar_manager/test/modules/registration/domain/repositories/repositories_mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:barbar_manager/modules/registration/domain/entities/client.dart'
    as _i6;
import 'package:barbar_manager/modules/registration/domain/entities/department.dart'
    as _i12;
import 'package:barbar_manager/modules/registration/domain/entities/establishment.dart'
    as _i10;
import 'package:barbar_manager/modules/registration/domain/entities/item.dart'
    as _i14;
import 'package:barbar_manager/modules/registration/domain/entities/user.dart'
    as _i8;
import 'package:barbar_manager/modules/registration/domain/errors/registration_errors.dart'
    as _i5;
import 'package:barbar_manager/modules/registration/domain/repositories/client_repository.dart'
    as _i3;
import 'package:barbar_manager/modules/registration/domain/repositories/department_repository.dart'
    as _i11;
import 'package:barbar_manager/modules/registration/domain/repositories/establishment_repository.dart'
    as _i9;
import 'package:barbar_manager/modules/registration/domain/repositories/item_repository.dart'
    as _i13;
import 'package:barbar_manager/modules/registration/domain/repositories/user_repository.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ClientRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientRepository extends _i1.Mock implements _i3.ClientRepository {
  MockClientRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.RegistrationErrors, _i6.Client>> createOrUpdate(
          _i6.Client? client) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdate, [client]),
              returnValue:
                  Future<_i2.Either<_i5.RegistrationErrors, _i6.Client>>.value(
                      _FakeEither_0<_i5.RegistrationErrors, _i6.Client>()))
          as _i4.Future<_i2.Either<_i5.RegistrationErrors, _i6.Client>>);
  @override
  _i4.Future<_i2.Either<_i5.RegistrationErrors, bool>> delete(
          _i6.Client? client) =>
      (super.noSuchMethod(Invocation.method(#delete, [client]),
          returnValue: Future<_i2.Either<_i5.RegistrationErrors, bool>>.value(
              _FakeEither_0<_i5.RegistrationErrors, bool>())) as _i4
          .Future<_i2.Either<_i5.RegistrationErrors, bool>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i7.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.UserRegistrationError, _i8.User>> createOrUpdate(
          _i8.User? user) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdate, [user]),
              returnValue:
                  Future<_i2.Either<_i5.UserRegistrationError, _i8.User>>.value(
                      _FakeEither_0<_i5.UserRegistrationError, _i8.User>()))
          as _i4.Future<_i2.Either<_i5.UserRegistrationError, _i8.User>>);
  @override
  _i4.Future<_i2.Either<_i5.UserRegistrationError, bool>> disable(
          _i8.User? user) =>
      (super.noSuchMethod(Invocation.method(#disable, [user]),
              returnValue:
                  Future<_i2.Either<_i5.UserRegistrationError, bool>>.value(
                      _FakeEither_0<_i5.UserRegistrationError, bool>()))
          as _i4.Future<_i2.Either<_i5.UserRegistrationError, bool>>);
}

/// A class which mocks [EstablishmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEstablishmentRepository extends _i1.Mock
    implements _i9.EstablishmentRepository {
  MockEstablishmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.RegistrationErrors, _i10.Establishment>>
      createOrUpdate(_i10.Establishment? establishment) => (super.noSuchMethod(
          Invocation.method(#createOrUpdate, [establishment]),
          returnValue: Future<
                  _i2.Either<_i5.RegistrationErrors, _i10.Establishment>>.value(
              _FakeEither_0<_i5.RegistrationErrors, _i10.Establishment>())) as _i4
          .Future<_i2.Either<_i5.RegistrationErrors, _i10.Establishment>>);
}

/// A class which mocks [DepartmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDepartmentRepository extends _i1.Mock
    implements _i11.DepartmentRepository {
  MockDepartmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.DepartmentRegistrationError, _i12.Department>>
      createOrUpdate(_i12.Department? department) =>
          (super.noSuchMethod(Invocation.method(#createOrUpdate, [department]),
              returnValue:
                  Future<_i2.Either<_i5.DepartmentRegistrationError, _i12.Department>>.value(
                      _FakeEither_0<_i5.DepartmentRegistrationError,
                          _i12.Department>())) as _i4
              .Future<_i2.Either<_i5.DepartmentRegistrationError, _i12.Department>>);
  @override
  _i4.Future<_i2.Either<_i5.RegistrationErrors, bool>> disable(
          _i12.Department? department) =>
      (super.noSuchMethod(Invocation.method(#disable, [department]),
          returnValue: Future<_i2.Either<_i5.RegistrationErrors, bool>>.value(
              _FakeEither_0<_i5.RegistrationErrors, bool>())) as _i4
          .Future<_i2.Either<_i5.RegistrationErrors, bool>>);
}

/// A class which mocks [ItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRepository extends _i1.Mock implements _i13.ItemRepository {
  MockItemRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ItemRegistrationError, _i14.Item>> createOrUpdate(
          _i14.Item? item) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdate, [item]),
          returnValue:
              Future<_i2.Either<_i5.ItemRegistrationError, _i14.Item>>.value(
                  _FakeEither_0<_i5.ItemRegistrationError, _i14.Item>())) as _i4
          .Future<_i2.Either<_i5.ItemRegistrationError, _i14.Item>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemRegistrationError, bool>> disable(
          _i14.Item? item) =>
      (super.noSuchMethod(Invocation.method(#disable, [item]),
              returnValue:
                  Future<_i2.Either<_i5.ItemRegistrationError, bool>>.value(
                      _FakeEither_0<_i5.ItemRegistrationError, bool>()))
          as _i4.Future<_i2.Either<_i5.ItemRegistrationError, bool>>);
}
